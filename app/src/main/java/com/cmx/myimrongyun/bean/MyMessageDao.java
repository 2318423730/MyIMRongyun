package com.cmx.myimrongyun.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MY_MESSAGE".
*/
public class MyMessageDao extends AbstractDao<MyMessage, Long> {

    public static final String TABLENAME = "MY_MESSAGE";

    /**
     * Properties of entity MyMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AbId = new Property(0, Long.class, "abId", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property HeadUrl = new Property(4, String.class, "headUrl", false, "HEAD_URL");
        public final static Property MessageType = new Property(5, String.class, "messageType", false, "MESSAGE_TYPE");
        public final static Property ConversationType = new Property(6, String.class, "conversationType", false, "CONVERSATION_TYPE");
        public final static Property UnreadMessageCount = new Property(7, int.class, "unreadMessageCount", false, "UNREAD_MESSAGE_COUNT");
    }


    public MyMessageDao(DaoConfig config) {
        super(config);
    }
    
    public MyMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MY_MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: abId
                "\"ID\" TEXT NOT NULL UNIQUE ," + // 1: id
                "\"TITLE\" TEXT NOT NULL ," + // 2: title
                "\"CONTENT\" TEXT," + // 3: content
                "\"HEAD_URL\" TEXT," + // 4: headUrl
                "\"MESSAGE_TYPE\" TEXT NOT NULL ," + // 5: messageType
                "\"CONVERSATION_TYPE\" TEXT NOT NULL ," + // 6: conversationType
                "\"UNREAD_MESSAGE_COUNT\" INTEGER NOT NULL );"); // 7: unreadMessageCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MY_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MyMessage entity) {
        stmt.clearBindings();
 
        Long abId = entity.getAbId();
        if (abId != null) {
            stmt.bindLong(1, abId);
        }
        stmt.bindString(2, entity.getId());
        stmt.bindString(3, entity.getTitle());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String headUrl = entity.getHeadUrl();
        if (headUrl != null) {
            stmt.bindString(5, headUrl);
        }
        stmt.bindString(6, entity.getMessageType());
        stmt.bindString(7, entity.getConversationType());
        stmt.bindLong(8, entity.getUnreadMessageCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MyMessage entity) {
        stmt.clearBindings();
 
        Long abId = entity.getAbId();
        if (abId != null) {
            stmt.bindLong(1, abId);
        }
        stmt.bindString(2, entity.getId());
        stmt.bindString(3, entity.getTitle());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String headUrl = entity.getHeadUrl();
        if (headUrl != null) {
            stmt.bindString(5, headUrl);
        }
        stmt.bindString(6, entity.getMessageType());
        stmt.bindString(7, entity.getConversationType());
        stmt.bindLong(8, entity.getUnreadMessageCount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MyMessage readEntity(Cursor cursor, int offset) {
        MyMessage entity = new MyMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // abId
            cursor.getString(offset + 1), // id
            cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // headUrl
            cursor.getString(offset + 5), // messageType
            cursor.getString(offset + 6), // conversationType
            cursor.getInt(offset + 7) // unreadMessageCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MyMessage entity, int offset) {
        entity.setAbId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getString(offset + 1));
        entity.setTitle(cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHeadUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMessageType(cursor.getString(offset + 5));
        entity.setConversationType(cursor.getString(offset + 6));
        entity.setUnreadMessageCount(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MyMessage entity, long rowId) {
        entity.setAbId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MyMessage entity) {
        if(entity != null) {
            return entity.getAbId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MyMessage entity) {
        return entity.getAbId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
